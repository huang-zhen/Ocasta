// testreply.cpp : Defines the entry point for the console application.
//
#ifdef WIN32
#include "stdafx.h"
#endif
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <strstream>
#include <stdio.h>
#include <time.h>
#include <math.h>
#include <assert.h>
#include <string.h>
#include <list>
#include "tracequery.h"
using namespace std;

const int TraceQuery::max_ratio = 999999;

TraceQuery::TraceQuery()
{
	ttstore = new TimeTravelStore();
	appstore = new AppStateStore();
}

TraceQuery::~TraceQuery()
{
	delete appstore;
	delete ttstore;
}

int TraceQuery::init(const char *server)
{
	if (!ttstore) {
		cerr << "Error creating TimeTravelStore" << endl;
		return 1;
	}
	if (ttstore->init(server)) {
		cerr << "Error initializing TimeTravelStore" << endl;
		return 1;
	}
	if (!appstore) {
		cerr << "Error creating AppStateStore" << endl;
		return 1;
	}
	if (appstore->init(server)) {
		cerr << "Error initializing AppStateStore" << endl;
		return 1;
	}
	return 0;
}

void TraceQuery::settrace(const char *tracename)
{
	strcpy(this->tracename, tracename);
	appstore->settrace(tracename);
	int id = appstore->getid(tracename);
	if (id > 0)
		ttstore->selectdb(id * 2 - 1);
	if (id > 0)
		appstore->selectdb(id * 2);
}

void TraceQuery::listtraces(vector<string>& traces)
{
	appstore->gettraces(traces);
}

string TraceQuery::value2str(int type, char *value)
{
	char buf[TimeTravelStore::max_value_len];
	strstream ss;
	switch (type) {
		case TimeTravelStore::REG_SZ:
		case TimeTravelStore::REG_EXPAND_SZ:
			sprintf(buf, "%S", (wchar_t *)value);
			ss << type << ": " << buf << ends;
			break;
		case TimeTravelStore::REG_DWORD:
			ss << type << ": " << *(int *)value << ends;
			break;
		case TimeTravelStore::REG_BINARY:
			ss << type << ": BINARY" << ends;
			break;
		case -1:
			ss << type << ": DELETED" << ends;
			break;
		default:
			ss << type << ": UNKNOWN TYPE" << ends;
			break;
	}
	return ss.str();
}

string TraceQuery::time2str(int time)
{
	time_t t = (time_t)time;
	struct tm *tm = localtime(&t);
	strstream ss;
	ss << tm->tm_year + 1900 << "-" << tm->tm_mon + 1 << "-" << tm->tm_mday << " " << tm->tm_hour << ":" << tm->tm_min << ":" << tm->tm_sec << ends;
	return ss.str();
}

int TraceQuery::getlatestversion(const char *key, string &value)
{
	char buf[TimeTravelStore::max_value_len];
	int valuelen = sizeof(buf);
	int type;
	double timestamp;
	if (ttstore->get_value(key, -1, buf, &valuelen, &type, &timestamp, 1)==0) {
		assert(valuelen < sizeof(buf));
		value = value2str(type, buf);
		return 0;
	}
	return -1;
}

double TraceQuery::getratio(const char *key, double time, int &num_versions)
{
	TimeTravelStore::key_info_t keyinfo;
	if (ttstore->get_key_info_ex(key, &keyinfo)) {
		cerr << __FUNCTION__ << ": failed to get key info for " << key << endl;
		return max_ratio;
	}
	double ratio = max_ratio;
	num_versions = ttstore->get_num_versions(key, time);
	if (keyinfo.get_count > 0)
		ratio = (double)num_versions/keyinfo.get_count;
	else
		ratio = max_ratio;
	return ratio;
}

void TraceQuery::calcintervaldist(TimeTravelStore::key_info_t &key_info, const char *key, double& avg, double& var, int& outliers, double& cv)
{
	vector<int> intervals;
	int lasttime = 0;
	int num = key_info.set_count;
#if 0
	// change to use gettimestamps for performance
	list<double> times;
	if (ttstore->get_timestamps(key, 0, times) > 0) {
		for (int version = 0; version < num; version ++) {
		}
	}
#else
	if (num > 1000)
		num = 1000;
	for (int version = 0; version < num; version++) {
		int type;
		double timestamp;
		//char buf[1024];

		if (ttstore->get_value(key, version, NULL, NULL, &type, &timestamp, 1)==0) {
			int time = (int)timestamp;
			if (lasttime)
				intervals.push_back(time - lasttime);
			lasttime = time;
		} else
			cerr << "Failed to get value@" << version << " for " << key << endl;
	}
#endif
	int sum = 0;	
	for (vector<int>::iterator it = intervals.begin(); it != intervals.end(); it++) {
		sum += *it;
	}
	if (sum > 0) {
		avg = sum / intervals.size();
		int diffsum = 0;
		for (vector<int>::iterator it = intervals.begin(); it != intervals.end(); it++) {
			int diff = *it - avg;
			diffsum += diff * diff;
		}
		var = sqrt(diffsum / intervals.size());
		cv = var/avg;
		int outliers = 0;
		for (vector<int>::iterator it = intervals.begin(); it != intervals.end(); it++) {
			if (labs(*it - avg) > var)
				outliers ++;
		}
	}
}

void TraceQuery::listkeys(string appname, string name, vector<string> &keys)
{
	string filename(tracename);
	filename += ".";
	filename += appname;
	filename += ".";
	filename += name;
	filename += ".csv";

	int totalset = 0;
	int totallabeledset = 0;

	ofstream ofs(filename.c_str());
	cout << "\t" << name << ":" << endl;
	for (int i = 0; i < keys.size(); i++) {
			TimeTravelStore::key_info_t key_info;
			if (!ttstore->get_key_info_ex(keys[i].c_str(), &key_info)) {
				int num_versions;
				double ratio = getratio(keys[i].c_str(), 0, num_versions);
				if (key_info.set_before_get & 0x80)
					totallabeledset += key_info.set_count;
				totalset += key_info.set_count;
				double avg = 0, var = 0, cv = 0;
				int outliers = 0;
				//calcintervaldist(key_info, keys[i].c_str(), avg, var, outliers, cv);
				//string latestversion;
				//getlatestversion(ttstore, keys[i].c_str(), latestversion);
				cout << i + 1 << ", \"" << keys[i].c_str() << "\", " << key_info.get_count << ", " << key_info.set_count << ", " << (key_info.set_before_get & 0x7f) << ", " << ((key_info.set_before_get & 0x80) >> 7) << ", " << ratio << num_versions << endl;
				if (ofs.good())
					ofs << i + 1 << ", \" " << keys[i].c_str() << "\", " << key_info.get_count << ", " << key_info.set_count << ", " << (key_info.set_before_get & 0x7f) << ", " << ((key_info.set_before_get & 0x80) >> 7) << ", " << ratio << ", " << num_versions << ", " << avg << ", " << var << ", " << cv << ", " << outliers << endl;
			} else {
				if (ttstore->create_key(keys[i].c_str(), 0, 1))
					cout << "Failed creating " << keys[i].c_str() << endl;
				cout << i + 1 << ", \"" << keys[i].c_str() << "\", 0, 0, 0, 0, 0.0" << endl;
				if (ofs.good())
					ofs << i + 1 << ", \"" << keys[i].c_str() << "\", 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0" << endl;
			}
	}
	if (totalset > 0)
		ofs << "Total Updates, " << totalset << ", " << totallabeledset << ", " << (double)(totalset - totallabeledset)/totalset << endl;
	ofs.close();
}

void TraceQuery::listkeyvalues(string appname, string name, vector<string> &keys)
{
	removeconstkeys(keys);
	do {
		cout << "List values for " << name << " key (0 for exit, -1 for list): ";
		int choice;
		cin >> choice;
		if (choice == 0)
			break;
		else if (choice == -1) {
			listkeys(appname, name, keys);
		}
		else if (choice >= 1 && choice <= keys.size()) {
			choice --;
			TimeTravelStore::key_info_t key_info;
			if (ttstore->get_key_info_ex(keys[choice].c_str(), &key_info) != -1) {
				cout << keys[choice].c_str() << ", " << key_info.get_count << ", " << key_info.set_count << ", " << (key_info.set_before_get & 0x7f) << ", " << ((key_info.set_before_get & 0x80) >> 7) << endl; 
				for (int version = key_info.set_count - 1; version >= 0; version--) {
					char value[TimeTravelStore::max_value_len];
					int valuelen = sizeof(value);
					int type;
					double timestamp;
					char buf[TimeTravelStore::max_value_len];
					if (ttstore->get_value(keys[choice].c_str(), version, value, &valuelen, &type, &timestamp, 1)==0) {
						time_t time = (time_t)timestamp;
						struct tm *tm = localtime(&time);
						strstream ss;
						ss << tm->tm_year + 1900 << "-" << tm->tm_mon + 1 << "-" << tm->tm_mday << " " << tm->tm_hour << ":" << tm->tm_min << ":" << tm->tm_sec << ends;
						switch (type) {
							case TimeTravelStore::REG_SZ:
							case TimeTravelStore::REG_EXPAND_SZ:
								sprintf(buf, "%S", (wchar_t *)value);
								if (buf[0] == '\0')
									sprintf(buf, "%s", value);
								cout << "\t" << ss.str() << "\t" << type << ": " << buf << endl;
								break;
							case TimeTravelStore::REG_DWORD:
								cout << "\t" << ss.str() << "\t" << type << ": " << *(int *)value << endl;
								break;
							case TimeTravelStore::REG_BINARY:
								cout << "\t" << ss.str() << "\t" << type << ": BINARY" << endl;
								break;
							case -1:
								cout << "\t" << ss.str() << "\tDELETED" << endl;
								break;
							default:
								cout << "\t" << ss.str() << "\t" << type << ": UNKNWON TYPE" << endl;
								break;
						}
					}
				}
			} else
				cout << "Error calling get_key_info_ex for " << keys[choice].c_str() << endl;
		} else
			cout << "Invalid choice, try again" << endl;
	} while (1);
}

void TraceQuery::queryapp(const char *appname, int totalonly)
{
	vector<string> pids;
	set<string> accessedkeys;
	set<string> updatedkeys;
	set<string> deletedkeys;
	appstore->getproc(appname, pids);
	double totalexecutiontime = 0.0;
	int totalaccess = 0;
	int totalupdate = 0;
	int totaldelete = 0;
	cerr << "trace: " << tracename << endl;
	cerr << "application: " << appname << endl;
	for (vector<string>::iterator it = pids.begin(); it != pids.end(); it++) {
		if (!totalonly)
			cerr << "pid: " << it->c_str() << endl;
		double executiontime = appstore->getexecutiontime(appname, it->c_str())/60.0;
		totalexecutiontime += executiontime;
		if (!totalonly)
			cerr << "\texecution time: " << executiontime << " minutes" << endl;
		int numberaccess = appstore->getnumberaccess(appname, it->c_str());
		if (numberaccess < 0)
			numberaccess = 0;
		else
			totalaccess += numberaccess;
		if (!totalonly)
			cerr << "\tkey accesses: " << numberaccess << endl;
		vector<string> keys;
		keys.clear();
		int numaccessedkeys = appstore->getaccessedkeys(appname, it->c_str(), keys);
		if (!totalonly)
			cerr << "\taccessed keys: " << numaccessedkeys << endl;
		//cout << "List the keys? (y/n) ";
		//char input[80];
		//cin >> input;
		//if (input[0] == 'y' || input[0] == 'Y') {
		for (vector<string>::iterator kit = keys.begin(); kit != keys.end(); kit++) {
			if (!totalonly) {
				cerr << "\tAccess " << kit->c_str() << endl;
			}
			accessedkeys.insert(*kit);
		}
		//}
		keys.clear();
		int numberupdate = appstore->getnumberupdate(appname, it->c_str());
		if (numberupdate < 0)
			numberupdate = 0;
		else
			totalupdate += numberupdate;
		if (!totalonly)
			cerr << "\tkey updates: " << numberupdate << endl;
		int numupdatedkeys = appstore->getupdatedkeys(appname, it->c_str(), keys);
		if (!totalonly)
			cerr << "\tupdated keys: " << numupdatedkeys << endl;
		for (vector<string>::iterator kit = keys.begin(); kit != keys.end(); kit++) {
			if (!totalonly)
				cerr << "\tUpdate " << kit->c_str() << endl;
			updatedkeys.insert(*kit);
		}
		keys.clear();
		int numberdelete = appstore->getnumberdelete(appname, it->c_str());
		if (numberdelete < 0)
			numberdelete = 0;
		else
			totaldelete += numberdelete;
		if (!totalonly)
			cerr << "\tkey deletes: " << numberdelete << endl;
		int numdeletedkeys = appstore->getdeletedkeys(appname, it->c_str(), keys);
		if (!totalonly)
			cerr << "\tdeleted keys: " << numdeletedkeys << endl;
		for (vector<string>::iterator kit = keys.begin(); kit != keys.end(); kit++) {
			if (!totalonly)
				cerr << "\tDelete " << kit->c_str() << endl;
			deletedkeys.insert(*kit);
		}
	}
	int totalevent = totalaccess + totalupdate + totaldelete;
	//if (accessedkeys.size() >= 20 && totalexecutiontime >= 30) {
	//if (totalevent >= 20) {
	{
		cerr << "trace: " << tracename << endl;
		cerr << "appname: " << appname << endl;
		cerr << "\texecutions: " << pids.size() << endl;
		cerr << "\texecution time: " << totalexecutiontime << " minutes" << endl;
		cerr << "\ttotal access: " << totalaccess << endl;
		cerr << "\ttotal update: " << totalupdate << endl;
		cerr << "\ttotal delete: " << totaldelete << endl;
		cerr << "\ttotal events: " << totalevent << endl;
		cerr << "\taccessed keys: " << accessedkeys.size() << endl;
		cerr << "\tupdated keys: " << updatedkeys.size() << endl;
		int i = 0;
#if 0
		for (set<string>::iterator it = accessedkeys.begin(); it != accessedkeys.end(); it++) {
				TimeTravelStore::key_info_t key_info;
				if (ttstore->get_key_info_ex(it->c_str(), &key_info) != -1)
					cerr << ++i << ". " << *it << ": " << key_info.get_count << ", " << key_info.set_count << endl;
				//else
				//	cerr << *it << endl;
		}
		cerr << "\tupdated keys: " << updatedkeys.size() << endl;
		cerr << "\tdeleted keys: " << deletedkeys.size() << endl;
#endif
		vector<string> accessedkeysarray;
		for (set<string>::iterator it = accessedkeys.begin(); it != accessedkeys.end(); it++) {
			accessedkeysarray.push_back(*it);
		}
		if (accessedkeysarray.size() > 0)
			listkeyvalues(appname, "accessed", accessedkeysarray);

		vector<string> updatedkeysarray;
		for (set<string>::iterator it = updatedkeys.begin(); it != updatedkeys.end(); it++) {
			updatedkeysarray.push_back(*it);
		}
		if (updatedkeysarray.size() > 0)
			listkeyvalues(appname, "updated", updatedkeysarray);


		set<string> accessedupdatedkeys;
		set_intersection(accessedkeys.begin(), accessedkeys.end(), updatedkeys.begin(), updatedkeys.end(), 
			inserter(accessedupdatedkeys, accessedupdatedkeys.begin()));
		cerr << "\taccessed & updated keys: " << accessedupdatedkeys.size() << endl;
		vector<string> accessedupdatedkeysarray;
		for (set<string>::iterator it = accessedupdatedkeys.begin(); it != accessedupdatedkeys.end(); it++) {
			accessedupdatedkeysarray.push_back(*it);
		}
		if (accessedupdatedkeysarray.size() > 0)
			listkeyvalues(appname, "accessedupdated", accessedupdatedkeysarray);

		set<string> accesseddeletedkeys;
		set_intersection(accessedkeys.begin(), accessedkeys.end(), deletedkeys.begin(), deletedkeys.end(), 
			inserter(accesseddeletedkeys, accesseddeletedkeys.begin()));
		cerr << "\taccessed & deleted keys: " << accesseddeletedkeys.size() << endl;

	}
}

int TraceQuery::get_key_version_num(const char *key)
{
	TimeTravelStore::key_info_t keyinfo;
	if (!ttstore->get_key_info_ex(key, &keyinfo)) {
		return keyinfo.set_count;
	} else {
		cerr << "Failed to get_key_info for " << key << endl;
		return 0;
	}
}

void TraceQuery::rankkeys(vector<string>& keys, list<keyranking>& rankedkeys, int time, double threshold)
{
	rankedkeys.clear();
	list<int> numupdates;
	for (vector<string>::iterator it = keys.begin(); it != keys.end(); it++) {
		TimeTravelStore::key_info_t keyinfo;
		if (ttstore->get_key_info_ex(it->c_str(), &keyinfo)) {
			cerr << "Failed to get key info for " << it->c_str() << endl;
			continue;
		}
		numupdates.push_back(ttstore->get_num_versions(it->c_str(), time));
	}
	numupdates.sort();

	list<keyranking> byratio;
	int highestupdates = numupdates.back();
	//int threshold = threshold * highestupdates;
	for (vector<string>::iterator it = keys.begin(); it != keys.end(); it++) {
		int num_versions;
#if 1
		num_versions = ttstore->get_num_versions(it->c_str(), time);
		if (num_versions < threshold) {
				insertkeyranking(rankedkeys, it->c_str(), num_versions, 1);
		} else {
				double ratio = getratio(it->c_str(), time, num_versions);
				insertkeyranking(byratio, it->c_str(), ratio, 1);
		}
#else
		double ranking;
		switch(policy) {
			case 0:
				//ranking = keyinfo.set_count;
				ranking = (double)ttstore->get_num_versions(it->c_str(), time);
				break;
			case 1:
				//ranking = (double)keyinfo.set_count/keyinfo.get_count;
				ranking = getratio(it->c_str(), time, num_versions);
				break;
			default:
				ranking = 0;
				break;
		}
		insertkeyranking(rankedkeys, it->c_str(), ranking, 1);
#endif
	}
}

int TraceQuery::rollbackkey(const char *key, int time)
{
	//if (time == 0)
	//	return get_key_version_num(key);

    int numrollbacks = 0;
	TimeTravelStore::key_info_t key_info;
	if (!ttstore->get_key_info_ex(key, &key_info)) {
		int num = ttstore->get_num_versions(key, time);
		if (num >= 0) {
			numrollbacks = num;
		} else
			cerr << "Failed to call get_num_versions for " << key << endl;
	} else
		cerr << "Failed to get key info for " << key << endl;
	return numrollbacks;
}

void TraceQuery::insertkeyranking(list<keyranking>& updates, const char *key, double ranking, int order)
{
	keyranking update;

	strcpy(update.key, key);
	update.ranking = ranking;

	list<keyranking>::iterator it;
	for (it = updates.begin(); it != updates.end(); it++) {
		if (0 == order) {
			if (ranking > it->ranking) {
				break;
			}
		} else {
			if (ranking < it->ranking) {
				break;
			}
		}
	}
	if (it == updates.end())
		updates.push_back(update);
	else {
		updates.insert(it, update);
	}
}

bool comp_keyranking(const TraceQuery::keyranking& first, const TraceQuery::keyranking& second)
{
	if (first.ranking <= second.ranking)
		return false;
	else
		return true;
}

int TraceQuery::rollbackbytime(const char *appname, const char *key, vector<string>& keys, int time)
{
	list<keyranking> updates;

	int cost = 0;
	set<string> rollbackedkeys;
	int processed = 0;

	for (vector<string>::iterator it = keys.begin(); it != keys.end(); it++) {
		list<double> times;
		int num = ttstore->get_timestamps(it->c_str(), time, times);
		if (num > 0) {
				for (list<double>::iterator dit = times.begin(); dit != times.end(); dit++) {
					if (*dit > time) {
						//insertkeyranking(updates, it->c_str(), *dit, 0);
						
						keyranking update;
						strcpy(update.key, it->c_str());
						update.ranking = *dit;
						updates.push_back(update);
					}
				}
		} else
			cerr << "Failed to get value for " << it->c_str() << endl;
	}
	// rollback
	updates.sort(comp_keyranking);
	string latesttime, rollbacktime;
	for (list<keyranking>::iterator it = updates.begin(); it != updates.end(); it++) {
		if (strcmp(it->key, key) == 0) {
			rollbacktime = time2str(it->ranking);
			break;
		} else {
			cerr << "rollback: " << it->key << "@" << time2str(it->ranking) << endl;
			cost++;
			rollbackedkeys.insert(it->key);
			if (latesttime == "")
				latesttime = time2str(it->ranking);
		}
	}
	cout << "cost & keys, " << cost << ", " << rollbackedkeys.size() << ", " << rollbacktime << ", " << latesttime << endl;
	return cost;
}

int TraceQuery::rollbackbyranking(const char *appname, const char *key, vector<string>& keys, int time, double threshold)
{
	list<keyranking> rankedkeys;
	rankkeys(keys, rankedkeys, time, threshold);

	int cost = 0;
	int numrollbackedkeys = 0;
	// rollback
	for (list<keyranking>::iterator it = rankedkeys.begin(); it != rankedkeys.end(); it++) {
		if (strcmp(it->key, key) == 0)
			break;
		int keycost = rollbackkey(it->key, time);
		cerr << "rollback: " << it->ranking << ", " << keycost << ", " << it->key << endl;
		if (keycost > 0) {
			cost += keycost;
			numrollbackedkeys ++;
		}
	}
	cout << "cost & keys, " << cost << ", " << numrollbackedkeys << endl;
	return cost;
}

void TraceQuery::calcrollbackcost(const char *appname, const char *key, vector<string>& keys, int time)
{
	int costbytime, costbyupdates, costbyratio;

	cout << tracename << ", " << "rollback by time, " << key << ", ";
	cerr << "# rollback by time" << endl;
	costbytime = rollbackbytime(appname, key, keys, time);
	cout << tracename << ", " << "rank by updates, " << key << ", ";
	cerr << "# rank by updates" << endl;
	costbyupdates = rollbackbyranking(appname, key, keys, time, 1);
	cout << tracename << ", " << "rank by ratio, " << key << ", ";
	cerr << "# rank by ratio" << endl;
	costbyratio = rollbackbyranking(appname, key, keys, time, 0);
	cout << (double)costbyratio/costbytime << ", " << (double)costbyupdates/costbytime << ", " << (double)costbyratio/costbyupdates << endl;
}

int TraceQuery::getlatestkeysettime(vector<string>& keys)
{
	list<keyranking> updates;
	for (vector<string>::iterator it = keys.begin(); it != keys.end(); it++) {
		list<double> times;
		int num = ttstore->get_timestamps(it->c_str(), 0, times);
		if (num > 0) {
				for (list<double>::iterator dit = times.begin(); dit != times.end(); dit++) {
					keyranking update;
					strcpy(update.key, it->c_str());
					update.ranking = *dit;
					updates.push_back(update);
				}
		} else
			cerr << "Failed to get value for " << it->c_str() << endl;
	}
	updates.sort(comp_keyranking);
	return updates.front().ranking;
}


//remvoe keys that have no versions
void TraceQuery::removeconstkeys(vector<string>& keys)
{
	vector<string>::iterator it = keys.begin();
	while (it != keys.end()) {
		if (get_key_version_num(it->c_str()) == 0)
			it = keys.erase(it);
		else
			++it;
	}
}

int TraceQuery::getaccessedversionedkeys(const char *appname, vector<string>& accessedkeys)
{
	accessedkeys.clear();
	//int numaccessedkeys = appstore->getaccessedkeys(appname, NULL, accessedkeys);
	//if (numaccessedkeys == 0) {
		set<string> keys;
		vector<string> pids;
		appstore->getproc(appname, pids);
		vector<string> tkeys;
		for (vector<string>::iterator it = pids.begin(); it != pids.end(); it++) {	
			int numaccessedkeys = appstore->getaccessedkeys(appname, it->c_str(), tkeys);
			for (vector<string>::iterator  tit = tkeys.begin(); tit != tkeys.end(); tit++)
				keys.insert(*tit);
		}
		for (set<string>::iterator it = keys.begin(); it != keys.end(); it++)
			accessedkeys.push_back(*it);
	//}
	removeconstkeys(accessedkeys);
	return accessedkeys.size();
}

void TraceQuery::testrollback(const char *appname)
{
	vector<string> keys;
	getaccessedversionedkeys(appname, keys);

	int numaccessedkeys = keys.size();
	if (numaccessedkeys > 0) {
		//listkeys(tracename, appname, "accessed keys", keys);
		do {
			cout << "Choose a key (1 to " << numaccessedkeys << ", 0 for exit, or -1 to list keys): ";
			int id;
			cin >> id;
			if (id == 0)
				break;
			else if (id == -1) {
				listkeys(appname, "accessedversioned", keys);
				continue;
			}
			cout << "Is it the right key \"" << keys[id - 1] << "\" (y/n)? ";
			char buf[80];
			cin >> buf;
			if (buf[0] == 'y' || buf[0] == 'Y') {
				int latesttime = getlatestkeysettime(keys);
				int time = -1;
				do {
					cout << "Choose the time of offending change (0 - in trace, N - N day ago, -1 to exit): ";
					char input[80];
					cin >> input;
					int choice = atoi(input);

					if (choice >= 1 && choice << 3) {
						time = latesttime - choice * 24 * 60 * 60;
						break;
					} else if (choice == 0) {
						time = 0;
						break;
					} else if (choice == -1)
						break;
					else
						cout << "Invalid choice, try again" << endl;
				} while (1);
				if (time >= 0) {
					cout << "rollback until " << time2str(time) << "(" << time2str(latesttime) << ")" << endl;
					calcrollbackcost(appname, keys[id - 1].c_str(), keys, time);
				}
				break;
			}
		} while (1);
	} else
		cout << appname << " does not access any key, is the application name correct?" << endl;
}

void TraceQuery::menuapp(const char *appname)
{
	int cont = 1;
	
	if (strcmp(appname, "*") == 0) {
		vector<string> apps;
		appstore->getapp(apps);
		for (vector<string>::iterator it = apps.begin(); it != apps.end(); it++) {
			cout << "Querying information on " << it->c_str() << endl;
			queryapp(it->c_str(), 1);
		}
	} else {
		do {
			cout << "1. Query keys accessed by application" << endl;
			cout << "2. Test rollback" << endl;
			cout << "Enter choice (0 to exit): ";
			int choice;
			cin >> choice;
			switch(choice) {
			case 0:
				cont = 0;
				break;
			case 1:
				queryapp(appname, 1);
				break;
			case 2:
				testrollback(appname);
				break;
			default:
				cout << "Invalid choice" << endl;
				break;
			}
		} while (cont);
	}
}

void TraceQuery::listapps(std::vector<std::string>& apps)
{
	appstore->getapp(apps);
}

#ifdef STANDALONE

TraceQuery tracequery;

void listtraces()
{
	int i = 0;
	vector<string> traces;
	tracequery.listtraces(traces);
	for (vector<string>::iterator it = traces.begin(); it != traces.end(); it++, i++)
		cout << i << ". " << it->c_str() << endl;
}

void listapps()
{
	int i = 0;
	vector<string> apps;
	tracequery.listapps(apps);
	for (vector<string>::iterator it = apps.begin(); it != apps.end(); it++, i++)
		cout << i << ". " << it->c_str() << endl;
}

int main(int argc, char* argv[])
{
	char *server = "127.0.0.1";

	if (argc > 1)
		server = argv[1];

	//strcpy(tracename, "test");

	if (tracequery.init(server)) {
		cout << "Error initializing server" << endl;
		return 0;
	}
	listtraces();
	do {
		char tracename[80];
		cout << "Enter trace name (0 for exit, -1 for list): ";
		cin >> tracename;
		if (strcmp(tracename, "0") == 0)
			break;
		else if (strcmp(tracename, "-1") == 0) {
			listtraces();
		} else {
			tracequery.settrace(tracename);

			char appname[80];

			do {
				cout << "Enter appname (* for all, 0 for exit, -1 for list): ";
				cin >> appname;
				if (strcmp(appname, "0") == 0) {
					break;
				} else if (strcmp(appname, "-1") == 0) {
					listapps();
				} else
					tracequery.menuapp(appname);
			} while (1);
		}
	} while (1);
	return 0;
}
#endif
/*
	//strcpy(appname, "AcroRd32.exe");
#if 0
	// test replay
	appstore->startproc(appname, "3512", 1);
	appstore->accesskey(appname, "3512", "SOFTWARE\\Policies\\Adobe\\Acrobat Reader\\10.0\\FeatureLockDown\\bUseReadPolicy", 2);
	appstore->updatekey(appname, "3512", "SOFTWARE\\Policies\\Adobe\\Acrobat Reader\\10.0\\FeatureLockDown\\bUseWhitelistConfigFile", 3);
	appstore->createkey(appname, "3512", "Software\\Adobe\\Acrobat Reader\\10.0\\Privileged\\bUseReadPolicy", 4);
	appstore->deletekey(appname, "3512", "Software\\Adobe\\Acrobat Reader\\10.0\\Installer\\Path", 5);
	appstore->accesskey(appname, "3512", "SOFTWARE\\Policies\\Adobe\\Acrobat Reader\\10.0\\FeatureLockDown\\bUseWhitelistConfigFile", 8);
	appstore->createproc(appname, "3512", "AdobeARM.exe", "4308", 10);
	appstore->exitproc(appname, "3512", 15);
#endif

#if 0
	map<string, void *> cache;
	cache["file"] = NULL;
	cache["file1"] = &cache;
	printf("%p\n", cache["file"]);
	printf("%p\n", cache["file1"]);
#endif

*/

